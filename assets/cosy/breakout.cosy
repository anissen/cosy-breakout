foreign fn text(str Str, x Num, y Num) Void
foreign fn fill_rect(x Num, y Num, width Num, height Num) Void
foreign fn fill_circle(x Num, y Num, radius Num) Void
foreign fn clear() Void
foreign fn color(c Str) Void

foreign fn max(a Num, b Num) Num
foreign fn min(a Num, b Num) Num
foreign fn atan2(a Num, b Num) Num
foreign fn cos(v Num) Num
foreign fn sin(v Num) Num

foreign var mouse_x Num // TODO: Should use keyboard input instead
foreign var mouse_clicked Bool // TODO: Should use keyboard input instead

// colors from here: https://lospec.com/palette-list/bluedream4
var color_background = '#ecf2cb'
var color_primary = '#1f285d'
var color_secondary = '#4b849a'
var color_tertiary = '#98d8b1'

var screen_width = 800
var screen_height = 600

var brick_width = 100
var brick_height = 50
var brick_padding = 20

var paddle_width = 100
var paddle_height = 20

struct Paddle {
    mut x Num
    mut y Num
    var width Num
    var height Num
}
mut paddle Paddle

struct Ball {
    mut x Num
    mut y Num
    mut speed_x Num
    mut speed_y Num
    var radius Num
}
mut ball Ball

struct Brick {
    var x Num
    var y Num
    mut lives Num = 1
}
mut bricks Array Brick = []

var start_lives = 3
mut lives = start_lives
mut game_speed = 50
mut score = 0
mut is_started = false

fn reset() {
    paddle = Paddle {
        x = screen_width / 2 - paddle_width / 2,
        y = screen_height - paddle_height / 2 - 50,
        width = 100,
        height = 20,
    }
    
    ball = Ball { 
        x = paddle.x + paddle.width / 2,
        y = paddle.y - 20,
        speed_x = 5,
        speed_y = -5,
        radius = 10,
    }

    game_speed = 50
    is_started = false
}

fn restart() {
    // setup bricks
    bricks = []
    for x in 0..6 {
        for y in 0..5 {
            mut brick_lives = 1
            if y % 2 == 0 {
                brick_lives = 2
            }
            var brick = Brick {
                x = 50 + x * (brick_width + brick_padding),
                y = 100 + y * (brick_height + brick_padding),
                lives = brick_lives,
            }
            bricks.push(brick)
        }
    }

    lives = start_lives
    reset()
}
restart()

fn ball_collision(x Num, y Num, width Num, height Num) Bool {
    var ball_top = ball.y - ball.radius
    var ball_bottom = ball.y + ball.radius
    var ball_right = ball.x + ball.radius
    var ball_left = ball.x - ball.radius
    var bottom = y + height
    var right = x + width
    var is_inside_width = ball_right >= x and ball_left <= x + width
    var is_inside_height =  ball_bottom >= y and ball_top <= y + height
    var collision = (ball_top <= bottom and ball_top > bottom + ball.speed_y and is_inside_width and ball.speed_y < 0) or // Hit from below
    (ball_bottom >= y and ball_bottom < y + ball.speed_y and is_inside_width and ball.speed_y > 0) or // Hit from above
    (ball_right >= x and ball_right < x + ball.speed_x and is_inside_height and ball.speed_x > 0) or // Hit from left
    (ball_left <= right and ball_left > right + ball.speed_x and is_inside_height and ball.speed_x < 0) // Hit from right

    if collision {
        // https://stackoverflow.com/a/45373126/802826
        var nearest_x = max(x, min(ball.x, x + width))
        var nearest_y = max(y, min(ball.y, y + height))
        var dist_x = (ball.x - nearest_x)
        var dist_y = (ball.y - nearest_y)

        var normal_angle = atan2(dist_x, -dist_y)
        var incoming_angle = atan2(ball.speed_y, ball.speed_x)
        var theta = normal_angle - incoming_angle

        var new_speed_x = ball.speed_x * cos(2 * theta) - ball.speed_y * sin(2 * theta)
        var new_speed_y = ball.speed_x * sin(2 * theta) + ball.speed_y * cos(2 * theta)
        ball.speed_x = new_speed_x
        ball.speed_y = new_speed_y
    }
    return collision
}

fn _update(dt Num) {
    if !is_started and mouse_clicked {
        if lives > 0 {
            is_started = true
        } else {
            restart()
        }
    }

    color(color_background)
    clear()

    // paddle
    color(color_tertiary)
    paddle.x = mouse_x - paddle.width / 2
    if paddle.x < 0 {
        paddle.x = 0
    } else if paddle.x > screen_width - paddle.width {
        paddle.x = screen_width - paddle.width
    }
    fill_rect(paddle.x, paddle.y, paddle.width, paddle.height)

    if is_started {
        // ball
        ball.x += ball.speed_x * dt * game_speed
        ball.y += ball.speed_y * dt * game_speed
        game_speed += dt * 2
        if ball.x <= 0 or ball.x + ball.radius >= screen_width {
            ball.speed_x = -ball.speed_x
        }
        if ball.y <= 0 {
            ball.speed_y = -ball.speed_y
        } else if ball.y + ball.radius >= screen_height {
            lives -= 1
            reset()
        }
    } else {
        ball.x = paddle.x + paddle.width / 2
    }
    color(color_primary)
    fill_circle(ball.x, ball.y, ball.radius)

    // resolve ball collision with paddle
    ball_collision(paddle.x, paddle.y, paddle.width, paddle.height)
    
    // bricks
    for brick in bricks {
        if brick.lives <= 0 {
            continue
        }

        if ball_collision(brick.x, brick.y, brick_width, brick_height) {
            brick.lives -= 1
            if brick.lives <= 0 {
                score += 1
            }
        } else brick.lives > 0 {
            if brick.lives == 2 { // TODO: Should be a switch/match statement
                color(color_tertiary)
            } else {
                color(color_secondary)
            }
            fill_rect(brick.x, brick.y, brick_width, brick_height)
        }
    }

    color(color_primary)
    text('Lives: {lives}, Score: {score}', screen_width / 2, 40)
    if lives <= 0 {
        text('Game Over!', screen_width / 2, screen_height / 2)
    }
}